<?xml version="1.0"?>
<blocks app="Snap! 6, https://snap.berkeley.edu" version="1">
  <block-definition s="setting %'which'" type="reporter" category="sensing">
    <comment w="254.66666666666666" collapsed="false">Allows reading global settings programmatically.&#xD;&#xD;Eisenberg's Law:  Anything you can do from the user interface you should be able to do in your program, and vice versa.  This library is just a beginning; there are many UI controls outside of the Settings menu.</comment>
    <header/>
    <code/>
    <translations>pt:o valor da configura&#xE7;&#xE3;o _&#xD;</translations>
    <inputs>
      <input type="%s" readonly="true">
        <options>Project notes&#xD;Project name&#xD;User&#xD;Presentation mode&#xD;Language&#xD;Zoom blocks&#xD;Stage size&#xD;Stage scale&#xD;Retina display support&#xD;Long form input dialog&#xD;Plain prototype labels&#xD;Input sliders&#xD;Execute on slider change&#xD;Clicking sound&#xD;Turbo mode&#xD;Flat design&#xD;Keyboard editing&#xD;Visible stepping&#xD;Thread safe scripts&#xD;Prefer smooth animations&#xD;Flat line ends&#xD;Codification support&#xD;Inheritance support&#xD;Hyper blocks support&#xD;Visible palette</options>
      </input>
    </inputs>
    <script>
      <block s="doReport">
        <block s="evaluate">
          <block s="reportJSFunction">
            <list>
              <l>which</l>
            </list>
            <l>var stage = this.parentThatIsA(StageMorph),&#xD;    ide = stage.parentThatIsA(IDE_Morph),&#xD;    world = stage.parentThatIsA(WorldMorph);&#xD;&#xD;switch (which) {&#xD;    case 'Project notes':&#xD;        return ide.projectNotes;&#xD;    case 'Project name':&#xD;        return ide.projectName;&#xD;    case 'User':&#xD;        return ide.cloud.username;&#xD;    case 'Presentation mode':&#xD;        return ide.isAppMode;&#xD;    case 'Language':&#xD;        return SnapTranslator.language;&#xD;    case 'Zoom blocks':&#xD;        return SyntaxElementMorph.prototype.scale;&#xD;    case 'Stage size':&#xD;        return new List([StageMorph.prototype.dimensions.x,&#xD;                                   StageMorph.prototype.dimensions.y]);&#xD;    case 'Stage scale':&#xD;       return stage.scale;&#xD;    case 'Retina display support':&#xD;        return isRetinaEnabled();&#xD;    case 'Long form input dialog':&#xD;        return InputSlotDialogMorph.prototype.isLaunchingExpanded;&#xD;    case 'Plain prototype labels':&#xD;        return BlockLabelPlaceHolderMorph.prototype.plainLabel;&#xD;    case 'Input sliders':&#xD;        return MorphicPreferences.useSliderForInput;&#xD;    case 'Execute on slider change':&#xD;        return ArgMorph.prototype.executeOnSliderEdit;&#xD;    case 'Clicking sound':&#xD;        return !!BlockMorph.prototype.snapSound;&#xD;    case 'Turbo mode':&#xD;        return stage.isFastTracked;&#xD;    case 'Flat design':&#xD;        return MorphicPreferences.isFlat;&#xD;    case 'Keyboard editing':&#xD;        return !!this.scripts.focus;&#xD;    case 'Visible stepping':&#xD;        return Process.prototype.enableSingleStepping;&#xD;    case 'Thread safe scripts':&#xD;        return stage.isThreadSafe;&#xD;    case 'Prefer smooth animations':&#xD;        return StageMorph.prototype.frameRate &gt; 0;&#xD;    case 'Flat line ends':&#xD;        return SpriteMorph.prototype.useFlatLineEnds;&#xD;    case 'Codification support':&#xD;        return StageMorph.prototype.enableCodeMapping;&#xD;    case 'Inheritance support':&#xD;        return StageMorph.prototype.enableInheritance;&#xD;    case 'Hyper blocks support':&#xD;        return Process.prototype.enableHyperOps;&#xD;    default: return which;&#xD;    case 'Visible palette':&#xD;        return ide.currentCategory;&#xD;}</l>
          </block>
          <list>
            <block var="which"/>
          </list>
        </block>
      </block>
    </script>
  </block-definition>
  <block-definition s="set flag %'which' to %'tf'" type="command" category="sensing">
    <comment w="254.66666666666666" collapsed="false">Allows changing global settings programmatically.&#xD;This block is for Boolean (checkbox) settings; use&#xD;SET VALUE for numeric or text values.&#xD;&#xD;Eisenberg's Law:  Anything you can do from the user interface you should be able to do in your program, and vice versa.  This library is just a beginning; there are many UI controls outside of the Settings menu.</comment>
    <header/>
    <code/>
    <translations>pt:altera o valor da configura&#xE7;&#xE3;o _ para _&#xD;</translations>
    <inputs>
      <input type="%s" readonly="true">
        <options>Presentation mode&#xD;Retina display support&#xD;Long form input dialog&#xD;Plain prototype labels&#xD;Input sliders&#xD;Execute on slider change&#xD;Clicking sound&#xD;Turbo mode&#xD;Flat design&#xD;Keyboard editing&#xD;Visible stepping&#xD;Thread safe scripts&#xD;Prefer smooth animations&#xD;Flat line ends&#xD;Codification support&#xD;Inheritance support&#xD;Hyper blocks support</options>
      </input>
      <input type="%b"/>
    </inputs>
    <script>
      <block s="doRun">
        <block s="reportJSFunction">
          <list>
            <l>which</l>
            <l>tf</l>
          </list>
          <l>var   stage = this.parentThatIsA(StageMorph),&#xD;        ide = stage.parentThatIsA(IDE_Morph),&#xD;        world = stage.parentThatIsA(WorldMorph),&#xD;        thisObj = this;&#xD;&#xD;if (tf != !!tf) return;&#xD;&#xD;try{&#xD;ide.savingPreferences = false;&#xD;&#xD;switch (which) {&#xD;    case 'Presentation mode':&#xD;        if (tf != ide.isAppMode) ide.toggleAppMode();&#xD;        break;&#xD;    case 'Retina display support':&#xD;        if (tf != isRetinaEnabled()) ide.toggleRetina();&#xD;        break;&#xD;    case 'Long form input dialog':&#xD;        if (tf != InputSlotDialogMorph.prototype.isLaunchingExpanded)&#xD;            ide.toggleLongFormInputDialog();&#xD;        break;&#xD;    case 'Plain prototype labels':&#xD;        if (tf != BlockLabelPlaceHolderMorph.prototype.plainLabel)&#xD;            ide.togglePlainPrototypeLabels();&#xD;        break;&#xD;    case 'Input sliders':&#xD;        MorphicPreferences.useSliderForInput = tf;&#xD;        break;&#xD;    case 'Execute on slider change':&#xD;        ArgMorph.prototype.executeOnSliderEdit = tf;&#xD;        break;&#xD;    case 'Clicking sound':&#xD;        if (tf != !!BlockMorph.prototype.snapSound)&#xD;            BlockMorph.prototype.toggleSnapSound();&#xD;        break;&#xD;    case 'Turbo mode':&#xD;        if (tf != stage.isFastTracked)&#xD;            ide.toggleFastTracking();&#xD;        break;&#xD;    case 'Flat design':&#xD;        if (tf == MorphicPreferences.isFlat) break;&#xD;        if (tf)&#xD;            ide.flatDesign();&#xD;        else&#xD;            ide.defaultDesign();&#xD;        break;&#xD;    case 'Keyboard editing':&#xD;        if (thisObj.scripts.focus &amp;&amp; !tf) {&#xD;            thisObj.scripts.focus.stopEditing();&#xD;        } else if (tf &amp;&amp; !thisObj.scripts.focus) {&#xD;            thisObj.scripts.toggleKeyboardEntry();&#xD;        };&#xD;        break;&#xD;    case 'Visible stepping':&#xD;        if (tf != Process.prototype.enableSingleStepping)&#xD;            ide.toggleSingleStepping();&#xD;        break;&#xD;    case 'Thread safe scripts':&#xD;        stage.isThreadSafe = tf;&#xD;        break;&#xD;    case 'Prefer smooth animations':&#xD;        if (tf != (StageMorph.prototype.frameRate &gt; 0))&#xD;            ide.toggleVariableFrameRate();&#xD;        break;&#xD;    case 'Flat line ends':&#xD;        SpriteMorph.prototype.useFlatLineEnds = tf;&#xD;        break;&#xD;    case 'Codification support':&#xD;        if (tf != StageMorph.prototype.enableCodeMapping) {&#xD;            StageMorph.prototype.enableCodeMapping = tf;&#xD;            ide.currentSprite.blocksCache.variables = null;&#xD;            ide.currentSprite.paletteCache.variables = null;&#xD;            ide.refreshPalette();&#xD;        }&#xD;        break;&#xD;    case 'Inheritance support':&#xD;        if (tf != StageMorph.prototype.enableInheritance) {&#xD;            StageMorph.prototype.enableInheritance = tf;&#xD;            ide.currentSprite.blocksCache.variables = null;&#xD;            ide.currentSprite.paletteCache.variables = null;&#xD;            ide.refreshPalette();&#xD;        }&#xD;        break;&#xD;    case 'Hyper blocks support':&#xD;        Process.prototype.enableHyperOps = tf;&#xD;        break;&#xD;};&#xD;}&#xD;finally {&#xD;ide.savingPreferences = false;&#xD;};&#xD;</l>
        </block>
        <list>
          <block var="which"/>
          <block var="tf"/>
        </list>
      </block>
    </script>
  </block-definition>
  <block-definition s="set value %'which' to %'value'" type="command" category="sensing">
    <comment w="254.66666666666666" collapsed="false">Allows changing global settings programmatically.&#xD;This block is for numeric or text settings; use&#xD;SET FLAG for Boolean (checkbox) values.&#xD;&#xD;Eisenberg's Law:  Anything you can do from the user interface you should be able to do in your program, and vice versa.  This library is just a beginning; there are many UI controls outside of the Settings menu.</comment>
    <header/>
    <code/>
    <translations>pt:altera o valor da configura&#xE7;&#xE3;o _ para _&#xD;</translations>
    <inputs>
      <input type="%s" readonly="true">
        <options>Project notes&#xD;Project name&#xD;Language&#xD;Zoom blocks&#xD;Stage size&#xD;Stage scale&#xD;Visible palette</options>
      </input>
      <input type="%s"/>
    </inputs>
    <script>
      <block s="doRun">
        <block s="reportJSFunction">
          <list>
            <l>which</l>
            <l>value</l>
          </list>
          <l>var   stage = this.parentThatIsA(StageMorph),&#xD;        ide = stage.parentThatIsA(IDE_Morph),&#xD;        world = stage.parentThatIsA(WorldMorph);&#xD;&#xD;try {&#xD;ide.savingPreferences = false;&#xD;&#xD;switch (which) {&#xD;    case 'Project notes':&#xD;        ide.projectNotes = value;&#xD;        break;&#xD;    case 'Project name':&#xD;        ide.setProjectName(value);&#xD;        break;&#xD;    case 'Language':&#xD;        ide.setLanguage(value);&#xD;        break;&#xD;    case 'Zoom blocks':&#xD;        if (!isNaN(value)) ide.setBlocksScale(Math.min(value, 12));&#xD;        break;&#xD;    case 'Stage size':&#xD;        if ((value instanceof List) &amp;&amp; value.length()==2&#xD;                       &amp;&amp; !isNaN(value.at(1)) &amp;&amp; !isNaN(value.at(2)))&#xD;            ide.setStageExtent(new Point(value.at(1), value.at(2)));&#xD;        break;&#xD;    case 'Stage scale':&#xD;        ide.toggleStageSize(value != 1, Math.max(0.1, value));&#xD;        break;&#xD;    case 'Visible palette':&#xD;        ide.currentCategory = value.toLowerCase();&#xD;        ide.categories.children.forEach(function (each) {&#xD;                each.refresh();&#xD;        });&#xD;        ide.refreshPalette(true);&#xD;        break;&#xD;};&#xD;}&#xD;finally {ide.savingPreferences = true;&#xD;};</l>
        </block>
        <list>
          <block var="which"/>
          <block var="value"/>
        </list>
      </block>
    </script>
  </block-definition>
</blocks>
