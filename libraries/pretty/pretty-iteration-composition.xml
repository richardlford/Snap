<?xml version="1.0"?>
<blocks app="Snap! 6, https://snap.berkeley.edu" version="1">
  <block-definition s="catch %'tag' %'action'" type="command" category="control">
    <header/>
    <code/>
    <translations>de:fange _ _&#xD;ca:agafa _ _&#xD;es:atrapar _ _&#xD;fr:attrape _ _&#xD;pt:captura _ _&#xD;</translations>
    <inputs>
      <input type="%upvar"/>
      <input type="%cs"/>
    </inputs>
    <script>
      <block s="doCallCC">
        <block s="reifyScript">
          <script>
            <block s="doSetVar">
              <l>tag</l>
              <block var="cont"/>
            </block>
            <block s="doRun">
              <block var="action"/>
              <list/>
            </block>
          </script>
          <list>
            <l>cont</l>
          </list>
        </block>
      </block>
    </script>
  </block-definition>
  <block-definition s="throw %'cont'" type="command" category="control">
    <header/>
    <code/>
    <translations>de:wirf _&#xD;ca:llan&#xE7;a _&#xD;es:lanzar _&#xD;fr:lance _&#xD;pt:lan&#xE7;a _&#xD;</translations>
    <inputs>
      <input type="%s">catchtag</input>
    </inputs>
    <script>
      <block s="doRun">
        <block var="cont"/>
        <list/>
      </block>
    </script>
  </block-definition>
  <block-definition s="catch %'tag' %'value'" type="reporter" category="control">
    <header/>
    <code/>
    <translations>de:fange _ _&#xD;ca:agafa _ _&#xD;es:atrapar _ _&#xD;fr:attrape _ _&#xD;pt:captura _ _&#xD;</translations>
    <inputs>
      <input type="%upvar"/>
      <input type="%anyUE"/>
    </inputs>
    <script>
      <block s="doCallCC">
        <block s="reifyScript">
          <script>
            <block s="doSetVar">
              <l>tag</l>
              <block var="cont"/>
            </block>
            <block s="doReport">
              <block s="evaluate">
                <block var="value"/>
                <list/>
              </block>
            </block>
          </script>
          <list>
            <l>cont</l>
          </list>
        </block>
      </block>
    </script>
  </block-definition>
  <block-definition s="throw %'tag' %'value'" type="command" category="control">
    <header/>
    <code/>
    <translations>de:wirf _ _&#xD;ca:llan&#xE7;a _ _&#xD;es:lanzar _ _&#xD;fr:lance _ _&#xD;pt:lan&#xE7;a _ _&#xD;</translations>
    <inputs>
      <input type="%s">catchtag</input>
      <input type="%s"/>
    </inputs>
    <script>
      <block s="doRun">
        <block var="tag"/>
        <list>
          <block var="value"/>
        </list>
      </block>
    </script>
  </block-definition>
  <block-definition s="if %'test' do %'action' and pause all $pause-1-255-220-0" type="command" category="control">
    <comment x="0" y="0" w="263.3333333333333" collapsed="false">This is a breakpoint block, to be used in debugging.&#xD;The Boolean input specifies the condition under which&#xD;the program should pause.  (Use True for an unconditional breakpoint.)  The intent is that the script should have&#xD;SHOW VARIABLE blocks for the process's local variables.&#xD;After the pause, this block automatically hides all temporary variables.</comment>
    <header/>
    <code/>
    <translations>de:falls _ dann _ und pause $pause-1-255-220-0&#xD;ca:si _ fes _ i atura-ho tot $pause-1-255-220-0&#xD;es:si _ haz _ y p&#xE1;ralo todo $pause-1-255-220-0&#xD;fr:si _ faire _ et mettre tout en pause $pause-1-255-220-0&#xD;pt:se _ , ent&#xE3;o _ e faz pausa em tudo $pause-1-255-220-0&#xD;</translations>
    <inputs>
      <input type="%boolUE"/>
      <input type="%cs"/>
    </inputs>
    <script>
      <block s="doDeclareVariables">
        <list>
          <l>breakpoint</l>
        </list>
      </block>
      <block s="doIf">
        <block s="evaluate">
          <block var="test"/>
          <list/>
        </block>
        <script>
          <block s="doSetVar">
            <l>breakpoint</l>
            <block var="test"/>
          </block>
          <block s="doShowVar">
            <l>breakpoint</l>
          </block>
          <block s="doRun">
            <block var="action"/>
            <list/>
          </block>
          <block s="doPauseAll"/>
          <block s="doHideVar">
            <l/>
          </block>
        </script>
      </block>
    </script>
  </block-definition>
  <block-definition s="ignore %'x'" type="command" category="control">
    <comment x="0" y="0" w="206.66666666666666" collapsed="false">This block does nothing.&#xD;Use it when you are calling a reporter&#xD;for its side effect and don't care about&#xD;its return value.</comment>
    <header/>
    <code/>
    <translations>de:ignoriere _&#xD;ca:ignora _&#xD;es:ignorar _&#xD;fr:ignore _&#xD;pt:ignora _&#xD;</translations>
    <inputs>
      <input type="%s"/>
    </inputs>
  </block-definition>
  <block-definition s="cascade %'num' times %'function' %'init' %'#'" type="reporter" category="control">
    <comment x="0" y="0" w="138" collapsed="false">Call f(f(f(...(f(x))))) n times where the three input slots are n, f, and x from left to right.  The # variable can be used inside f to represent how many times f has been called.</comment>
    <header/>
    <code/>
    <translations>pt:o resultado de _ invoca&#xE7;&#xF5;es em cascata de _ com argumento inicial _ _&#xD;</translations>
    <inputs>
      <input type="%n"/>
      <input type="%repRing"/>
      <input type="%s"/>
      <input type="%upvar"/>
    </inputs>
    <script>
      <block s="doDeclareVariables">
        <list>
          <l>result</l>
        </list>
      </block>
      <block s="doSetVar">
        <l>result</l>
        <block var="init"/>
      </block>
      <block s="doSetVar">
        <l>#</l>
        <l>0</l>
      </block>
      <block s="doRepeat">
        <block var="num"/>
        <script>
          <block s="doChangeVar">
            <l>#</l>
            <l>1</l>
          </block>
          <block s="doSetVar">
            <l>result</l>
            <block s="evaluate">
              <block var="function"/>
              <list>
                <block var="result"/>
              </list>
            </block>
          </block>
        </script>
      </block>
      <block s="doReport">
        <block var="result"/>
      </block>
    </script>
  </block-definition>
  <block-definition s="cascade until %'pred' %'function' %'init' %'#'" type="reporter" category="control">
    <comment x="0" y="0" w="210.47493489583334" collapsed="false">Call f(f(f(...(f(x))))) until condition is true, where the three input slots are condition, f, and x from left to right.  The # variable can be used inside f or condition to indicate how many times f has been called.</comment>
    <header/>
    <code/>
    <translations>pt:o resultado da invoca&#xE7;&#xE3;o em cascata at&#xE9; que _ de _ com argumento inicial _ _&#xD;</translations>
    <inputs>
      <input type="%predRing"/>
      <input type="%repRing"/>
      <input type="%s"/>
      <input type="%upvar"/>
    </inputs>
    <script>
      <block s="doDeclareVariables">
        <list>
          <l>result</l>
        </list>
      </block>
      <block s="doSetVar">
        <l>result</l>
        <block var="init"/>
      </block>
      <block s="doSetVar">
        <l>#</l>
        <l>0</l>
      </block>
      <block s="doUntil">
        <block s="evaluate">
          <block var="pred"/>
          <list>
            <block var="result"/>
          </list>
        </block>
        <script>
          <block s="doChangeVar">
            <l>#</l>
            <l>1</l>
          </block>
          <block s="doSetVar">
            <l>result</l>
            <block s="evaluate">
              <block var="function"/>
              <list>
                <block var="result"/>
              </list>
            </block>
          </block>
        </script>
      </block>
      <block s="doReport">
        <block var="result"/>
      </block>
    </script>
  </block-definition>
  <block-definition s="compose %'f' %'g'" type="reporter" category="control">
    <comment x="0" y="0" w="151.33333333333334" collapsed="false">Returns the function x&#x21A6;f(g(x)) where f and g are the two inputs.</comment>
    <header/>
    <code/>
    <translations>pt:a composi&#xE7;&#xE3;o de _ com _&#xD;</translations>
    <inputs>
      <input type="%repRing"/>
      <input type="%repRing"/>
    </inputs>
    <script>
      <block s="doReport">
        <block s="reifyReporter">
          <autolambda>
            <block s="evaluate">
              <block var="f"/>
              <list>
                <block s="evaluate">
                  <block var="g"/>
                  <list>
                    <l/>
                  </list>
                </block>
              </list>
            </block>
          </autolambda>
          <list/>
        </block>
      </block>
    </script>
  </block-definition>
  <block-definition s="repeat %'action' until %'pred'" type="command" category="control">
    <comment x="0" y="0" w="202.66666666666666" collapsed="false">Like the built-in REPEAT UNTIL block, except that the ending condition is not tested until the script has been run the first time.  So the script is run at least once.</comment>
    <header/>
    <code/>
    <translations>pt:repete _ at&#xE9; que _ $loop-0.7&#xD;</translations>
    <inputs>
      <input type="%cs"/>
      <input type="%boolUE"/>
    </inputs>
    <script>
      <block s="doRun">
        <block var="action"/>
        <list/>
      </block>
      <block s="doUntil">
        <block s="evaluate">
          <block var="pred"/>
          <list/>
        </block>
        <script>
          <block s="doRun">
            <block var="action"/>
            <list/>
          </block>
        </script>
      </block>
    </script>
  </block-definition>
  <block-definition s="repeat %'action' while %'pred'" type="command" category="control">
    <comment x="0" y="0" w="287.3333333333333" collapsed="false">Run the script repeatedly, as long as the given condition is true.  Runs the script at least once before testing the condition.</comment>
    <header/>
    <code/>
    <translations>pt:repete _ enquanto _ $loop-0.7&#xD;</translations>
    <inputs>
      <input type="%cs"/>
      <input type="%boolUE"/>
    </inputs>
    <script>
      <block s="doRun">
        <block var="action"/>
        <list/>
      </block>
      <block s="doUntil">
        <block s="reportNot">
          <block s="evaluate">
            <block var="pred"/>
            <list/>
          </block>
        </block>
        <script>
          <block s="doRun">
            <block var="action"/>
            <list/>
          </block>
        </script>
      </block>
    </script>
  </block-definition>
  <block-definition s="repeat while %'pred' %'action'" type="command" category="control">
    <comment x="0" y="0" w="264" collapsed="false">Runs the script repeatedly, as long as the condition is true. Tests the condition before the first time the script is run.  Like the built in REPEAT UNTIL except that in this block the condition must be true, not false.</comment>
    <header/>
    <code/>
    <translations>pt:enquanto _ , repete _ $loop-0.7&#xD;</translations>
    <inputs>
      <input type="%boolUE"/>
      <input type="%cs"/>
    </inputs>
    <script>
      <block s="doUntil">
        <block s="reportNot">
          <block s="evaluate">
            <block var="pred"/>
            <list/>
          </block>
        </block>
        <script>
          <block s="doRun">
            <block var="action"/>
            <list/>
          </block>
        </script>
      </block>
    </script>
  </block-definition>
  <block-definition s="repeat %'num' %'#' %'action'" type="command" category="control">
    <comment x="0" y="0" w="171" collapsed="false">Runs the script the specified number of times, like the built-in REPEAT block, but this one provides the # variable that can be used inside the script.  Try&#xD;REPEAT (200)&#xD;                MOVE (#) STEPS&#xD;   RIGHT 92&#xD;with the pen down.</comment>
    <header/>
    <code/>
    <translations>pt:repete _ vezes _ _ $loop-0.7&#xD;</translations>
    <inputs>
      <input type="%n"/>
      <input type="%upvar"/>
      <input type="%cs"/>
    </inputs>
    <script>
      <block s="doSetVar">
        <l>#</l>
        <l>0</l>
      </block>
      <block s="doRepeat">
        <block var="num"/>
        <script>
          <block s="doChangeVar">
            <l>#</l>
            <l>1</l>
          </block>
          <block s="doRun">
            <block var="action"/>
            <list/>
          </block>
        </script>
      </block>
    </script>
  </block-definition>
  <block-definition s="for %'i' = %'start' step %'step' to %'end' %'action'" type="command" category="control">
    <comment x="0" y="0" w="247.33333333333334" collapsed="false">The primitive FOR block uses an implicit step of &#xB1;1 depending on which of the starting and ending values is larger.  This version allows you to provide an explicit step value.  If the sign of the step input is incompatible with the ordering of the starting and ending values, the script will not be run at all.</comment>
    <header/>
    <code/>
    <translations>pt:para _ de _ com passo _ a _ _ $loop-0.7&#xD;</translations>
    <inputs>
      <input type="%upvar"/>
      <input type="%n">1</input>
      <input type="%n">1</input>
      <input type="%n">10</input>
      <input type="%cs"/>
    </inputs>
    <script>
      <block s="doDeclareVariables">
        <list>
          <l>test</l>
        </list>
      </block>
      <block s="doSetVar">
        <l>i</l>
        <block var="start"/>
      </block>
      <block s="doIfElse">
        <block s="reportLessThan">
          <block var="step"/>
          <l>0</l>
        </block>
        <script>
          <block s="doSetVar">
            <l>test</l>
            <block s="reifyPredicate">
              <autolambda>
                <block s="reportLessThan">
                  <block var="i"/>
                  <block var="end"/>
                </block>
              </autolambda>
              <list/>
            </block>
          </block>
        </script>
        <script>
          <block s="doSetVar">
            <l>test</l>
            <block s="reifyPredicate">
              <autolambda>
                <block s="reportGreaterThan">
                  <block var="i"/>
                  <block var="end"/>
                </block>
              </autolambda>
              <list/>
            </block>
          </block>
        </script>
      </block>
      <block s="doUntil">
        <block s="evaluate">
          <block var="test"/>
          <list/>
        </block>
        <script>
          <block s="doRun">
            <block var="action"/>
            <list/>
          </block>
          <block s="doChangeVar">
            <l>i</l>
            <block var="step"/>
          </block>
        </script>
      </block>
    </script>
  </block-definition>
  <block-definition s="let %'a' be %'val' in %'loop' %'body'" type="command" category="control">
    <comment x="0" y="0" w="238.66666666666666" collapsed="false">Provides LOOP as a function of one input that runs&#xD;the body of the LET with A set to the function input,&#xD;so the body can run itself recursively.&#xD;See COPY block in Variables for an example of use.</comment>
    <header/>
    <code/>
    <translations>pt:tendo _ o valor inicial _ , executa _ definido como _&#xD;</translations>
    <inputs>
      <input type="%upvar"/>
      <input type="%s"/>
      <input type="%upvar"/>
      <input type="%cs"/>
    </inputs>
    <script>
      <block s="doSetVar">
        <l>a</l>
        <block var="val"/>
      </block>
      <block s="doSetVar">
        <l>loop</l>
        <block s="reifyScript">
          <script>
            <block s="doSetVar">
              <l>a</l>
              <block var="new value"/>
            </block>
            <block s="doRun">
              <block var="body"/>
              <list>
                <block var="a"/>
              </list>
            </block>
          </script>
          <list>
            <l>new value</l>
          </list>
        </block>
      </block>
      <block s="doRun">
        <block var="loop"/>
        <list>
          <block var="a"/>
        </list>
      </block>
    </script>
  </block-definition>
  <block-definition s="pipe %'value' $arrowRight %'pipe'" type="reporter" category="control">
    <comment w="339.3333333333333" collapsed="false">The inputs are a starting value and one or more monadic functions.&#xD;The first function is called with the starting value as its input.&#xD;The second function is called with the value reported by the first function as its input, and so on.  PIPE reports the value reported by the last function.  PIPE provides an alternative notation for function composition instead of the usual nesting.&#xD;&#xD;nested acronym:                                                                 &#xD;report (combine (keep items (capital-letter? ( )) from&#xD;                  (map (letter (1) of ( )) over&#xD;                                                 (sentence&#x2192;list (phrase)))) using (join ( ) ( )))&#xD;&#xD;piped acronym:                                             &#xD;report (pipe (phrase) &#x2192; &#xD;            (sentence&#x2192;list ( ))&#xD;                              (map (letter (1) of ( )) over ( ))&#xD;                                              (keep items (capital-letter? ( )) from ( ))&#xD;                                (combine ( ) using (join ( ) ( )))&#xD;&#xD;Some people find PIPE easier to read because the functions are called in the same order in which you read them, whereas in nested composition the innermost function is called first. </comment>
    <header/>
    <code/>
    <translations>pt:a aplica&#xE7;&#xE3;o a _ de _&#xD;</translations>
    <inputs>
      <input type="%s"/>
      <input type="%mult%repRing"/>
    </inputs>
    <script>
      <block s="doIf">
        <block s="reportListIsEmpty">
          <block var="pipe"/>
        </block>
        <script>
          <block s="doReport">
            <block var="value"/>
          </block>
        </script>
      </block>
      <block s="doReport">
        <custom-block s="pipe %s $arrowRight %mult%repRing">
          <block s="evaluate">
            <block s="reportListItem">
              <l>1</l>
              <block var="pipe"/>
            </block>
            <list>
              <block var="value"/>
            </list>
          </block>
          <block s="reportCDR">
            <block var="pipe"/>
          </block>
        </custom-block>
      </block>
    </script>
  </block-definition>
</blocks>
